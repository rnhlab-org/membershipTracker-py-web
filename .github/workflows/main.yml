name: CI/CD Workflow for MembershipTracker-py-web

# Trigger the workflow based on specific events
on:
  push:
    branches:
      - stage  # Trigger on direct pushes to the stage branch
    tags:
      - 'stage-*'  # Trigger on tags starting with stage- (e.g., stage-1.0.0-alpha.1)
      - 'v*.*.*'    # Trigger on version tags (e.g., v1.0.0)
  pull_request:
    branches:
      - stage  # Trigger on pull requests to stage branch
      - main   # Trigger on pull requests to main branch

jobs:
  # Step 1: Run Code Quality and Security Checks
  code-checks:
    name: Run Code Quality and Security Checks
    runs-on: ubuntu-latest
    steps:
      # Step 1.1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full Git history for analysis

      # Step 1.2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Use Python 3.9 for the workflow

      # Step 1.3: Install dependencies
      - name: Install Python Dependencies
        run: |
          pip install -r app/requirements.txt  # Install project dependencies
          pip install bandit  # Install Bandit for security checks

      # Step 1.4: Run Bandit for security checks
      - name: Run Bandit Security Checks
        run: bandit -r app/  # Recursively scan the app directory for vulnerabilities

      # Step 1.5: Run SonarCloud Analysis
      - name: Run SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Use the SonarCloud token for authentication

  # Step 2: Build and Validate Container
  build-validate:
    name: Build, Validate, and Discard Container
    needs: code-checks  # Ensure code-checks job completes successfully before running
    runs-on: ubuntu-latest
    steps:
      # Step 2.1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # ---DEBUG--- Debug GitHub Ref
      - name: Debug GitHub Ref
        run: |
          echo "GitHub Ref: ${GITHUB_REF}"  # Log the GitHub reference for debugging

      # Step 2.2: Extract Version and Set Image Tag
      - name: Extract Version and Set Image Tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            IMAGE_TAG="membershiptracker-py-web:${VERSION}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/stage ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            IMAGE_TAG="membershiptracker-py-web-dev:${VERSION}"
          else
            VERSION=latest
            IMAGE_TAG="membershiptracker-py-web-dev:latest"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

        # Step 2.2.1: Manually update Chart appVersion as it does not do it automatically
      - name: Update Chart appVersion
        run: |
          sed -i "s/^appVersion:.*/appVersion: ${VERSION}/" charts/membershipTracker-py-web/Chart.yaml
          cat charts/membershipTracker-py-web/Chart.yaml  # Verify the change in logs

        # Step 2.2.2: Update Image Tag in values.yaml
      - name: Update Image Tag in values.yaml
        run: |
          sed -i "s/^  tag:.*/  tag: ${VERSION}/" charts/membershipTracker-py-web/values.yaml
          cat charts/membershipTracker-py-web/values.yaml  # Verify the change in logs     

      # !!! DEBUG !!! Debug Version and Tag
      - name: ---DEBUG--- Version and Tag
        run: |
          echo "Version: $VERSION"  # Log the extracted version
          echo "Image Tag: $IMAGE_TAG"  # Log the image tag

      # Step 2.4: Build Docker Container
      - name: Build Container
        run: |
          docker build --build-arg APP_VERSION=$VERSION -t $IMAGE_TAG .  # Build the Docker image with the extracted version

      # Step 2.5: Validate Container Locally
      - name: Validate Container
        run: |
          docker run -d --name temp-container -p 8080:8000 $IMAGE_TAG  # Run the container locally
          sleep 5  # Wait for the container to start
          curl -f http://localhost:8080 || (docker logs temp-container && exit 1)  # Check if the web page loads successfully
          docker stop temp-container && docker rm temp-container  # Stop and remove the container after validation

  # Step 3: Push Container to AWS ECR
  push-container:
    name: Push Container to AWS ECR
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/stage') || startsWith(github.ref, 'refs/tags/v'))
    needs: build-validate  # Ensure the container has been validated before pushing
    runs-on: ubuntu-latest
    steps:
      - name: Extract Version and Set Image Tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
           IMAGE_TAG="membershiptracker-py-web:${VERSION}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/stage ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            IMAGE_TAG="membershiptracker-py-web-dev:${VERSION}"
          else
            VERSION=latest
            IMAGE_TAG="membershiptracker-py-web-dev:latest"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Version: $VERSION"
          echo "Image Tag: $IMAGE_TAG"

      # ---DEBUG--- Debug GitHub Ref
      - name: Debug GitHub Ref
        run: |
          echo "GitHub Ref: ${GITHUB_REF}"  # Log the GitHub reference for debugging

      # !!! DEBUG !!! : Debug Version and Tag
      - name: ---DEBUG--- Version and Tag
        run: |
          echo "Version: $VERSION"  # Log the extracted version
          echo "Image Tag: $IMAGE_TAG"  # Log the image tag           

      # Step 3.1: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 798742520104.dkr.ecr.us-west-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret key

      # Step 3.2: Push Docker Image to ECR
      - name: Push Docker Image
        run: |
          docker push $IMAGE_TAG  # Push the built image to AWS ECR

  # # Step 4: Deploy to Production with ArgoCD
  # # Not used when ArgoCD is set to pull, not push
  # deploy-main:
  #   name: Deploy to Production with ArgoCD
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # Only deploy on version tags (e.g., v1.0.0)
  #   needs: push-container  # Ensure the container has been pushed to ECR before deployment
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Step 4.1: Sync ArgoCD Application
  #     - name: Sync ArgoCD Application
  #       run: |
  #         argocd app sync membershipTracker-py-web  # Sync the application in ArgoCD
  #         argocd app wait membershipTracker-py-web --timeout 300  # Wait for the sync to complete
