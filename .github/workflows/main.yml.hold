name: CI/CD Workflow for MembershipTracker-py-web

# Trigger the workflow based on specific events
on:
  push:
    branches:
      - stage  # Trigger on direct pushes to the stage branch
    tags:
      - 'stage-*'  # Trigger on tags starting with stage- (e.g., stage-1.0.0-alpha.1)
      - 'v*.*.*'    # Trigger on version tags (e.g., v1.0.0)
  pull_request:
    branches:
      - stage  # Trigger on pull requests to stage branch
      - main   # Trigger on pull requests to main branch

jobs:
  # Step 1: Run Code Quality and Security Checks
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      full_image_tag: ${{ steps.extract.outputs.full_image_tag }}
      local_image_tag: ${{ steps.extract.outputs.local_image_tag }}
    steps:
      # Step 2.2: Extract Version and Set Image Tag
      - name: Extract Version and Set Image Tag
        id: extract
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            FULL_IMAGE_TAG="798742520104.dkr.ecr.us-west-1.amazonaws.com/membershiptracker-py-web:${VERSION}"
            LOCAL_IMAGE_TAG="membershiptracker-py-web:${VERSION}"
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/stage ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            FULL_IMAGE_TAG="798742520104.dkr.ecr.us-west-1.amazonaws.com/membershiptracker-py-web-dev:${VERSION}"
            LOCAL_IMAGE_TAG="membershiptracker-py-web-dev:${VERSION}"
          else
            VERSION=latest
            FULL_IMAGE_TAG="798742520104.dkr.ecr.us-west-1.amazonaws.com/membershiptracker-py-web-dev:latest"
            LOCAL_IMAGE_TAG="membershiptracker-py-web-dev:latest"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "FULL_IMAGE_TAG=${FULL_IMAGE_TAG}" >> $GITHUB_ENV
          echo "LOCAL_IMAGE_TAG=${LOCAL_IMAGE_TAG}" >> $GITHUB_ENV
          echo "Version: $VERSION"
          echo "Local Image Tag: $LOCAL_IMAGE_TAG"
          echo "Full Image Tag: $FULL_IMAGE_TAG"     
      # -DEBUG- Debug GitHub Ref
      - name: -DEBUG- GitHub Ref
        run: |
          echo "GitHub Ref: ${GITHUB_REF}"  # Log the GitHub reference for debugging
      # -DEBUG- Debug Version and Tag
      - name: -DEBUG- Version and Tag
        run: |
          echo "Version: $VERSION" # Log the extracted version
          echo "Local Image Tag: $LOCAL_IMAGE_TAG"
          echo "Full Image Tag: $FULL_IMAGE_TAG"
      # Output common job Vars   
      - name: Send Setup Outputs for other Jobs 
        id: outputs
        run: |
          # # Output variable - OLD
          # echo "::set-output name=version::${VERSION}"
          # echo "::set-output name=full_image_tag::${FULL_IMAGE_TAG}"
          # echo "::set-output name=local_image_tag::${LOCAL_IMAGE_TAG}"  
          # Output variable
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "full_image_tag=${FULL_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "local_image_tag=${LOCAL_IMAGE_TAG}" >> $GITHUB_OUTPUT  

  setup-validate:
    name: Setup Output Variable Validation #
    needs: 
      - setup  # Ensure setup job completes successfully before running    
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      FULL_IMAGE_TAG: ${{ needs.setup.outputs.full_image_tag }}
      LOCAL_IMAGE_TAG: ${{ needs.setup.outputs.local_image_tag }}
    runs-on: ubuntu-latest
    # Step 1: -DEBUG- Validate Setup Outputs
    steps:  
      - name: -DEBUG- Validate Setup Outputs
        id: varsetup
        # if: always() && github.event_name == 'push' && github.ref != 'refs/heads/main' # Always run this step for push events except production
        run: |
          echo "Version: $VERSION" # Log the extracted version
          echo "Local Image Tag: $LOCAL_IMAGE_TAG"
          echo "Full Image Tag: $FULL_IMAGE_TAG" 
        
  code-checks:
    name: Run Code Quality and Security Checks
    runs-on: ubuntu-latest
    steps:
      # Step 1.1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full Git history for analysis

      # Step 1.2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Use Python 3.9 for the workflow

      # Step 1.3: Install dependencies
      - name: Install Python Dependencies
        run: |
          pip install -r app/requirements.txt  # Install project dependencies
          pip install bandit  # Install Bandit for security checks

      # Step 1.4: Run Bandit for security checks
      - name: Run Bandit Security Checks
        run: bandit -r app/  # Recursively scan the app directory for vulnerabilities

      # Step 1.5: Run SonarCloud Analysis
      - name: Run SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Use the SonarCloud token for authentication

  # Step 2: Build and Validate Container
  build-validate:
    name: Build, Validate, and Discard Container
    needs: 
    - setup  # Ensure setup job completes successfully before running
    - code-checks  # Ensure code-checks job completes successfully before running
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      FULL_IMAGE_TAG: ${{ needs.setup.outputs.full_image_tag }}
      LOCAL_IMAGE_TAG: ${{ needs.setup.outputs.local_image_tag }}   

    steps:
      # Step 2.1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2.2: -DEBUG- Validate Setup Outputs
      - name: -DEBUG- Validate Setup Outputs
        id: varsetup
        # if: always() && github.event_name == 'push' && github.ref != 'refs/heads/main' # Always run this step for push events except production
        run: |
          echo "Version: $VERSION" # Log the extracted version
          echo "Local Image Tag: $LOCAL_IMAGE_TAG"
          echo "Full Image Tag: $FULL_IMAGE_TAG" 

        # Step 2.2.1: Manually update Chart appVersion as it does not do it automatically
      - name: Update Chart appVersion
        id: update-chart
        run: |
          sed -i "s/^appVersion:.*/appVersion: ${VERSION}/" charts/membershipTracker-py-web/Chart.yaml
          cat charts/membershipTracker-py-web/Chart.yaml  # Verify the change in logs

        # Step 2.2.2: Update Image Tag in values.yaml
      - name: Update Image Tag in values.yaml
        id: update-values
        run: |
          sed -i "s/^  tag:.*/  tag: ${VERSION}/" charts/membershipTracker-py-web/values.yaml
          cat charts/membershipTracker-py-web/values.yaml  # Verify the change in logs     

      # Step 2.4: Build Docker Container
      - name: Build Container
        id: buildcontainer
        run: |
          docker build --build-arg APP_VERSION=$VERSION -t $LOCAL_IMAGE_TAG .  # Build the Docker image with the extracted version

      # -DEBUG- Verify Docker Image Creation
      - name: -DEBUG- Verify Docker Image Creation
        id: debug
        # if: always() && github.event_name == 'push' && github.ref != 'refs/heads/main' # Always run this step for push events except production
        run: |
          echo "--- Validate specific container exits ---"
          docker images $LOCAL_IMAGE_TAG
          echo "--- Validate all container ---"
          docker images 
    

      # Step 2.5: Validate Container Locally
      - name: Validate Container
        id: container-validation
        run: |
          docker run -d --name temp-container -p 8080:8000 $LOCAL_IMAGE_TAG  # Run the container locally
          sleep 5  # Wait for the container to start
          curl -f http://localhost:8080 || (docker logs temp-container && exit 1)  # Check if the web page loads successfully
          docker stop temp-container && docker rm temp-container  # Stop and remove the container after validation

  # Step 3: Push Container to AWS ECR
  push-container:
    name: Push Container to AWS ECR
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/stage') || startsWith(github.ref, 'refs/tags/v'))
    needs: 
      - setup  # Ensure setup job completes successfully before running
      - build-validate  # Ensure the container has been validated before pushing
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      FULL_IMAGE_TAG: ${{ needs.setup.outputs.full_image_tag }}
      LOCAL_IMAGE_TAG: ${{ needs.setup.outputs.local_image_tag }}   
    steps:
      # Step 2.2: -DEBUG- Validate Setup Outputs
      - name: -DEBUG- Validate Setup Outputs and Verify Docker Image Availability
        id: debug
        # if: always() && github.event_name == 'push' && github.ref != 'refs/heads/main' # Always run this step for push events except production
        run: |
          echo "Version: $VERSION" # Log the extracted version
          echo "Local Image Tag: $LOCAL_IMAGE_TAG"
          echo "Full Image Tag: $FULL_IMAGE_TAG"
          echo "--- Validate specific container exits ---"
          docker images $LOCAL_IMAGE_TAG
          echo "--- Validate all container ---""
          docker images 

      # Step 3.1: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: loginecr
        run: |
          aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 798742520104.dkr.ecr.us-west-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret key

      # Step 3.2: Push Docker Image to ECR
      - name: Push Docker Image
        id: imagepush
        run: |
          docker push $FULL_IMAGE_TAG  # Push the built image to AWS ECR


